import { useQueryClient } from "@tanstack/react-query";
import * as todoService from "../api/todoService";
import { useNetworkState } from "../hooks/useNetworkState";
import { Todo } from "../shared-types";
import { Context } from "../shared-types/context";

export function addTodoMutationOptions() {
  const queryClient = useQueryClient();
  const isConnected = useNetworkState();
  return {
    mutationKey: ["addTodo"],
    // This function defines the mutation operation for adding a new todo.
    mutationFn: todoService.addTodo,

    // Called just before the mutation function is executed.
    onMutate: async (newTodoTitle: string) => {
      // Cancel any ongoing refetch operations for the 'todos' query.
      // This is to prevent any refetches from overwriting our optimistic update.
      await queryClient.cancelQueries({
        queryKey: ["todos"],
      });

      // Take a snapshot of the current state of 'todos' data for possible rollback.
      const previousTodos = queryClient.getQueryData<Todo[]>(["todos"]);

      // Create a new todo object with a temporary ID and the provided title.
      // Note: We use a temporary ID because the real ID will be generated by the server.
      const newTodo = { id: Date.now(), text: newTodoTitle, completed: false };

      if (!isConnected) {
        // Optimistically update the todos list in the cache with the new todo.
        if (previousTodos) {
          queryClient.setQueryData<Todo[]>(["todos"], [...previousTodos, newTodo]);
        }
      }

      // Return the context with the previous state to allow for rollbacks.
      return { previousTodos };
    },

    // Called if the mutation encounters an error.
    onError: (context: Context) => {
      // If there's an error, revert the optimistic update using the previous state.
      if (context?.previousTodos) {
        queryClient.setQueryData(["todos"], context.previousTodos);
      }
    },

    // Called when the mutation is either successful or unsuccessful.
    onSettled: () => {
      // After the mutation is completed, refetch the todos to sync with the server.
      queryClient.invalidateQueries({ queryKey: ["todos"] });
    },
  };
}
